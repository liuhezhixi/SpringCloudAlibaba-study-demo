# 应用服务 WEB 访问端口 8301~8350
springBootServerPort=8301
# springboot与sentinelDashboard交互的端口号：8351~8399
sentinelServerPort=8351
# docker容器的ip地址
#ipAddr=192.168.31.20
ipAddr=172.16.61.133



# 应用名称
spring.application.name=consumer-boot
# 应用服务 WEB 访问端口 8301~8350 (8351~8399给了sentinel)
server.port=${springBootServerPort}

#sentinel配置信息
#指定sentinel控制台的地址
spring.cloud.sentinel.transport.dashboard=${ipAddr}:8858
#在微服务运行时会启动一个Http Server，该Server的作用就是与sentinel的dashboard进行交互 push 时候使用的端口(8351~8399给了sentinel)
spring.cloud.sentinel.transport.port=${sentinelServerPort}
# 取消Sentinel控制台懒加载
# 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包
# 配置 sentinel.eager=true 时，取消Sentinel控制台懒加载功能
spring.cloud.sentinel.eager=true


####Sentinel结合nacos实现限流规则储存持久化
### 针对流控规则持久化
##nacos的访问地址，，根据上面准备工作中启动的实例配置
spring.cloud.sentinel.datasource.ds1.nacos.server-addr=${ipAddr}:8848
##nacos中存储规则的groupId
spring.cloud.sentinel.datasource.ds1.nacos.groupId=DEFAULT_GROUP
#nacos中存储规则的dataId
spring.cloud.sentinel.datasource.ds1.nacos.dataId=${spring.application.name}-sentinel-flow
##该参数是spring cloud alibaba升级到0.2.2之后增加的配置，用来定义存储的规则类型。
## 所有的规则类型可查看枚举类：org.springframework.cloud.alibaba.sentinel.datasource.RuleType，每种规则的定义格式可以通过各枚举值中定义的规则对象来查看，比如限流规则可查看：com.alibaba.csp.sentinel.slots.block.flow.FlowRule
## FLOW-流控、DEGRADE-降级。因为上面的配置是用于限流的，所以我们rule-type就选择 flow
spring.cloud.sentinel.datasource.ds1.nacos.rule-type=flow
### 针对降级规则持久化
##nacos的访问地址，，根据上面准备工作中启动的实例配置
spring.cloud.sentinel.datasource.ds2.nacos.server-addr=${ipAddr}:8848
##nacos中存储规则的groupId
spring.cloud.sentinel.datasource.ds2.nacos.groupId=DEFAULT_GROUP
#nacos中存储规则的dataId
spring.cloud.sentinel.datasource.ds2.nacos.dataId=${spring.application.name}-sentinel-degrade
##该参数是spring cloud alibaba升级到0.2.2之后增加的配置，用来定义存储的规则类型。
## 所有的规则类型可查看枚举类：org.springframework.cloud.alibaba.sentinel.datasource.RuleType，每种规则的定义格式可以通过各枚举值中定义的规则对象来查看，比如限流规则可查看：com.alibaba.csp.sentinel.slots.block.flow.FlowRule
## FLOW-流控、DEGRADE-降级。因为上面的配置是用于降级的，所以我们rule-type就选择 flow
spring.cloud.sentinel.datasource.ds2.nacos.rule-type=degrade


# Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
# Nacos认证信息
spring.cloud.nacos.discovery.username=nacos
spring.cloud.nacos.discovery.password=nacos
# Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
spring.cloud.nacos.discovery.server-addr=${ipAddr}:8848
# 注册到 nacos 的指定 namespace，默认为 public
spring.cloud.nacos.discovery.namespace=public


# 要实现Openfeign的服务降级(也是就兜底数据，ProviderRemoteServiceFallback.class里面的内容)，这个Hystrix支持必须打开（或者打开sentinel支持）
#feign.hystrix.enabled=true
feign.sentinel.enabled=true


##针对在注册中心，注册名为"provider-boot"的微服务进行Ribbon结合Openfeign的设置
#todo [针对指定名字的微服务，测试成功]
##说明：这里配置的ConnectTimeout和ReadTimeout是当HTTP客户端使用的是HttpClient才生效，这个时间最终会被设置到HttpClient中。#在设置的时候需要结合hystrix的超时时间来综合考虑，针对使用的场景，设置太小会导致很多请求失败，设置太大会导致熔断控制变差。
##请求连接超时时间
#provider-boot.ribbon.ConnectTimeout=2000
##请求处理超时时间
provider-boot.ribbon.ReadTimeout=3000
##对所有操作都进行重试
#provider-boot.ribbon.OkToRetryOnAllOperations=true
#####根据如上配置，当访问到故障请求的时候，它会再尝试访问一次当前实例（次数由 MaxAutoRetries配置），
#####如果不行，就换一个实例进行访问，如果还不行，再换一次实例访问（更换次数由 MaxAutoRetriesNextServer配置），
#####如果依然不行，返回失败信息。
##对当前选中实例重试次数，不包括第一次调用
#provider-boot.ribbon.MaxAutoRetries=0
##切换实例的重试次数
#provider-boot.ribbon.MaxAutoRetriesNextServer=0
##负载策略调整
###轮询策略
#provider-boot.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RoundRobinRule
###随机策略
#provider-boot.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule


##未指定微服务名，就正对所有微服务生效
#todo 其他的配置是否生效待测试
##说明：这里配置的ConnectTimeout和ReadTimeout是当HTTP客户端使用的是HttpClient才生效，这个时间最终会被设置到HttpClient中。#在设置的时候需要结合hystrix的超时时间来综合考虑，针对使用的场景，设置太小会导致很多请求失败，设置太大会导致熔断控制变差。
##请求连接超时时间
#ribbon.ConnectTimeout=2000
##请求处理超时时间
#ribbon.ReadTimeout=3000
##对所有操作都进行重试
#ribbon.OkToRetryOnAllOperations=true
#####根据如上配置，当访问到故障请求的时候，它会再尝试访问一次当前实例（次数由 MaxAutoRetries配置），
#####如果不行，就换一个实例进行访问，如果还不行，再换一次实例访问（更换次数由 MaxAutoRetriesNextServer配置），
#####如果依然不行，返回失败信息。
##对当前选中实例重试次数，不包括第一次调用
#ribbon.MaxAutoRetries=0
##切换实例的重试次数
#ribbon.MaxAutoRetriesNextServer=0

#todo 全局配置负载均衡配置方式未生效！需要使用RibbonConfig配置类中的注入负载均衡策略对象方式才能生效
##负载策略调整
###随机策略
#ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule






