# 应用服务 WEB 访问端口 8401~8450
springBootServerPort=8401
# springboot与sentinelDashboard交互的端口号：8451~8499
sentinelServerPort=8451


# 应用名称
spring.application.name=gateway-boot
# 应用服务 WEB 访问端口 8401~8450
server.port=${springBootServerPort}


# Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
# Nacos认证信息
spring.cloud.nacos.discovery.username=nacos
spring.cloud.nacos.discovery.password=nacos
# Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
spring.cloud.nacos.discovery.server-addr=192.168.31.20:8848
# 注册到 nacos 的指定 namespace，默认为 public
spring.cloud.nacos.discovery.namespace=public



#sentinel配置信息
#指定sentinel控制台的地址
spring.cloud.sentinel.transport.dashboard=192.168.31.20:8858
#在微服务运行时会启动一个Http Server，该Server的作用就是与sentinel的dashboard进行交互 push 时候使用的端口(8451~8499给了sentinel)
spring.cloud.sentinel.transport.port=${sentinelServerPort}
# 取消Sentinel控制台懒加载
# 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包
# 配置 sentinel.eager=true 时，取消Sentinel控制台懒加载功能
spring.cloud.sentinel.eager=true
## Sentinel 网关流控默认的粒度是 route 维度以及自定义 API 分组维度，默认不支持 URL 粒度。
## 若通过 Spring Cloud Alibaba 接入，将 spring.cloud.sentinel.filter.enabled 配置项置为 false（若在SentinelDashboard的网关流控控制台上看到了 URL 资源，就是此配置项没有置为 false）。
spring.cloud.sentinel.filter.enabled=false
## 【非常重要】如果该项目是gateway项目，Sentinel整个gateway需要再启动的时候加上jvm参数：
## "-Dcsp.sentinel.app.type=1"
## 从Sentinel客户端1.6.3版本开始，控制台支持网关流控规则管理。
## 该启动参数会将您的服务标记为 API Gateway，在接入控制台时您的服务会自动注册为网关类型，然后您即可在控制台配置网关规则和 API 分组。
## 注意：网上有些资料说spring.cloud.sentinel.app.type = 1 可以标示为网关项目，但亲测试无效，所以必须在启动网关项目的时候，一定要加上-Dcsp.sentinel.app.type=1


# todo 等待研究这些配置的效果：
# 是否与服务发现组件进行结合，通过 serviceId 转发到具体服务实例
# 是否开启基于服务发现的路由规则
spring.cloud.gateway.discovery.locator.enabled=true
# 是否将服务名称转小写
spring.cloud.gateway.discovery.locator.lower-case-service-id=true


#gateway配置内容
#以下为路由的配置
#路由的id，保持唯一即可（lsg也叫路由名）
spring.cloud.gateway.routes[0].id=edu-lagou-SpringCloudAlibaba_to_consumer-boot
#提供服务的路由地址（lgs也可以去注册中心查找微服务的名字）
#针对服务地址url的写法：spring.cloud.gateway.routes[0].uri=http://${你的服务ip}:${你的服务port}
#针对去注册中心查找微服务的名字的写法
spring.cloud.gateway.routes[0].uri=lb://consumer-boot 
#断言，路径相匹配的进行路由
spring.cloud.gateway.routes[0].predicates[0]=Path=/consumer/**
#过滤器，去掉URl中的第一部分，不同请求可以使用不同过滤器
# （lgs，去掉第一部分的意思，实际上也就是当上面的断言匹配成功后，通过gateway去访问到"consumer-boot"的具体请求，是没有"/consumer"这个第一段的。）
#  例如 --> 通过gateway去请求"consumer-boot"的服务：127.0.0.1:8401/consumer/user/select/88
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1



